import{m as p}from"./chunk-19a327d5.js";async function g(C){const{data:n,error:s}=await C;return s?(p.send("toast","error",s),{error:s}):{data:n}}class u{static translate(n=0,s=0){const t=[[1,0,n],[0,1,s],[0,0,1]];return new u(t)}static scale(n,s,t={x:0,y:0}){const e=[[n,0,0],[0,s,0],[0,0,1]],r=u.translate(t.x,t.y),o=new u(e);let c=u.translate(-t.x,-t.y);return r.multiply(o).multiply(c)}static rotate(n,s={x:0,y:0}){const t=Math.cos(n),e=Math.sin(n),r=u.translate(s.x,s.y),o=new u([[t,-e,0],[e,t,0],[0,0,1]]);let c=u.translate(-s.x,-s.y);return r.multiply(o).multiply(c)}static init(){return new u([[1,0,0],[0,1,0],[0,0,1]])}constructor(n){this.data=[],this.rowCount=n.length,this.columnCount=n[0].length,n.forEach((s,t)=>{s.forEach((e,r)=>{this.set(t,r,e)})})}set(n,s,t){const e=n*this.columnCount+s;this.data[e]=t}get(n,s){const t=n*this.columnCount+s;return this.data[t]}getRow(n){const s=n*this.columnCount;return this.data.slice(s,s+this.columnCount)}getColumn(n){const s=[];for(let t=0;t<this.rowCount;t++)s.push(this.get(t,n));return s}getCofactor(n,s){let t=[];for(let e=0;e<this.rowCount;e++){if(e===n)continue;let r=[];for(let o=0;o<this.columnCount;o++)o!==s&&r.push(this.get(e,o));t.push(r)}return new u(t).determinant()*Math.pow(-1,n+s)}toCSSMatrixArray(){const n=this.data;return[n[0],n[3],n[1],n[4],n[2],n[5]]}determinant(){if(this.columnCount===2)return this.get(0,0)*this.get(1,1)-this.get(1,0)*this.get(0,1);const n=0;let s=0;for(let t=0;t<this.columnCount;t++)s+=this.get(n,t)*this.getCofactor(n,t);return s}getInverse(){const n=this.data;let s=1/this.determinant(),t=[],e=n[0],r=n[1],o=n[2],c=n[3],l=n[4],a=n[5],i=n[6],h=n[7],m=n[8],f=m*l-a*h,w=a*i-m*c,d=h*c-l*i;return t[0]=f*s,t[1]=(o*h-m*r)*s,t[2]=(a*r-o*l)*s,t[3]=w*s,t[4]=(m*e-o*i)*s,t[5]=(o*c-a*e)*s,t[6]=d*s,t[7]=(r*i-h*e)*s,t[8]=(l*e-r*c)*s,new u([[t[0],t[1],t[2]],[t[3],t[4],t[5]],[t[6],t[7],t[8]]])}multiply(n){const s=[];for(let t=0;t<this.rowCount;t++){const e=this.getRow(t),r=[];for(let o=0;o<n.columnCount;o++){const c=n.getColumn(o);let l=0;e.forEach((a,i)=>{l+=a*c[i]}),r.push(l)}s.push(r)}return new u(s)}}function x({x:C,y:n},s){const t=new u([[C],[n],[1]]),e=s.multiply(t),[r,o]=e.getColumn(0);return{x:r,y:o}}export{u as M,x as a,g as s};
//# sourceMappingURL=chunk-5333695d.js.map
